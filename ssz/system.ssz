lib cfg = "../save/config.ssz";

//Load "lib/" Scripts
lib al = <alert.ssz>;
lib file = <file.ssz>;
lib m = <math.ssz>;
lib s = <string.ssz>;

//Load "lib/alpha/" Scripts


//Load "script/ssz/" Scripts
lib act = "action.ssz";
lib com = "common.ssz";
lib fgt = "fight.ssz";
lib sff = "sff.ssz";


public &Select
{
  public &Char
  {
    public ^/char def;
    public ^/char name;
    public ^/char sprite;
	public ^/char anim;
    public ^&.sff.Sprite facePortrait;
    public ^&.sff.Sprite bigPortrait;
	public ^&.sff.Sprite orderPortrait;
	public ^&.sff.Sprite vsPortrait;
    public ^&.sff.Sprite winPortrait;
	public ^&.sff.Sprite loserPortrait;
	public ^&.sff.Sprite resultPortrait;
	public ^&.sff.Sprite extraPortrait;
  }
  public &Stage
  {
    public ^/char def;
    public ^/char name;
	public ^/char sprite;
	public ^/char anim;
	public ^&.sff.Sprite iconStagePortrait;
	public ^&.sff.Sprite bigStagePortrait;
	public ^&.sff.Sprite vsStagePortrait;
	public ^&.sff.Sprite winStagePortrait;
	public ^&.sff.Sprite extraStagePortrait;
  }
  public int columns = 5, rows = 2;
  public float cellsizex = 29.0, cellsizey = 29.0;
  public float cellscalex = 1.0, cellscaley = 1.0;
  
  public int faceGroup = .cfg.CharPortraitsGroup, faceIndex = .cfg.CharFacePortraitIndex;
  public int bigGroup = .cfg.CharPortraitsGroup, bigIndex = .cfg.CharBigPortraitIndex;
  public int winGroup = .cfg.CharPortraitsGroup, winIndex = .cfg.CharWinnerPortraitIndex;
  public int loserGroup = .cfg.CharPortraitsGroup, loserIndex = .cfg.CharLoserPortraitIndex;
  public int orderGroup = .cfg.CharPortraitsGroup, orderIndex = .cfg.CharOrderPortraitIndex;
  public int vsGroup = .cfg.CharPortraitsGroup, vsIndex = .cfg.CharVSPortraitIndex;
  public int resultGroup = .cfg.CharPortraitsGroup, resultIndex = .cfg.CharResultsPortraitIndex;
  public int extraGroup = .cfg.CharPortraitsGroup, extraIndex = .cfg.CharExtraPortraitIndex;
  
  public int IconStageGroup = .cfg.StagePortraitsGroup, IconStageIndex = .cfg.StageIconPortraitIndex;
  public int bigStageGroup = .cfg.StagePortraitsGroup, bigStageIndex = .cfg.StageBigPortraitIndex;
  public int vsStageGroup = .cfg.StagePortraitsGroup, vsStageIndex = .cfg.StageVSPortraitIndex;
  public int winStageGroup = .cfg.StagePortraitsGroup, winStageIndex = .cfg.StageWinPortraitIndex;
  public int extraStageGroup = .cfg.StagePortraitsGroup, extraStageIndex = .cfg.StageExtraPortraitIndex;
  
  public ^&.sff.Sprite randomspr;
  public float randxscl = 1.0, randyscl = 1.0;
  public %&Char charlist;
  public %&Stage stagelist;
  public index curStageNo = 0, selectedStageNo = -1;
  public index getCharNo(index i)
  {
    index n = i;
    if(#`charlist > 0){
      n %= #`charlist;
      if(n < 0) n += #`charlist;
    }
    ret n;
  }
  public ^&Char getChar(index i)
  {
    index n = `getCharNo(i);
    ret `charlist[n..n+1];
  }
  public index getStageNo(index i)
  {
    index n = i;
    if(#`stagelist > 0){
      n %= #`stagelist;
      if(n < 0) n += #`stagelist;
    }
    ret n;
  }
  public ^&Stage getStage(index i)
  {
    index n = `getStageNo(i);
    ret `stagelist[n..n+1];
  }
  public index setStageNo(index i)
  {
    `curStageNo = i;
    `curStageNo %= #`stagelist + 1;
    if(`curStageNo < 0) `curStageNo += #`stagelist + 1;
    ret `curStageNo;
  }
  public void selectStage(index no)
  {
    `selectedStageNo = no;
  }
  public ^/char getStageName(index i)
  {
    index n = i;
    n %= #`stagelist + 1;
    if(n < 0) n += #`stagelist + 1;
    if(n == 0) ret "RANDOM";
    ret `stagelist[n-1].name;
  }
  public bool addChar(^/char def)
  {:<-
    public void info(&.com.Section sc=)
    {
      ^/char data;
      branch{
      cond #(data = sc.get("displayname")) > 0:
        `charlist[-1].name = data;
      cond #(data = sc.get("name")) > 0:
        `charlist[-1].name = data;
      }
    }
    public void files(&.com.Section sc=, bool unicode)
    {
      ^/char data;
      if(#(data = sc.get("sprite")) > 0){
        `charlist[-1].sprite = .com.readFileName(data, unicode);
      }
	  if(#(data = sc.get("anim")) > 0){
        `charlist[-1].anim = .com.readFileName(data, unicode);
      }
    }
    bool unicode = false;
    bool infoflg = true, filesflg = true;
    ~$void(^^/char, index=) section = [void(^^/char lines, index i=){
      ^/char sec = lines[i];
      ^/char secname = .com.sectionName(sec=);
      if(#secname == 0) ret;
      i++;
      &.com.Section sc.parse(lines, i=);
      branch{
      cond .s.equ(secname, "info"):
        if(infoflg) info(sc=);
        infoflg = false;
      cond .s.equ(secname, "files"):
        if(filesflg) files(sc=, unicode);
        filesflg = false;
      }
    }];
    ^/char error;
    ^^/char defs =
      .s.each!def.self?([void(def.self s=){s = .s.trim(s);}])<,
      .s.split(",", def);
    ^char mainbuf;
    `charlist.new[-1];
    if(.s.equ("randomselect")<, .s.toLower(defs[0])){
      `charlist[-1].def = "randomselect";
      `charlist[-1].name = "Random";
      ret true;
    }
    ^/char d = defs[0];
    index delimiter = .s.cFind("\/", d);
    branch{
    cond .s.equ(.s.toLower(d[#d-4 .. -1]), ".def"):
      if(delimiter < 0) ret true;
    cond delimiter < 0:
      d = d + "/" + d + ".def";
    else:
      d = d + ".def";
    }
    if(delimiter < 0 || (delimiter > 0 &&.s.find(":", d[0 .. delimiter]) < 0)){
      d = "chars/" + d;
    }
    if(#.com.loadText(d, unicode=)=>mainbuf == 0) ret true;
    `charlist[-1].def = d;
    %^/char lines = .com.splitLines(mainbuf);
    .s.each!^/char?([void(^/char l=){l=.s.trim(l);}], lines);
    loop{index i = 0; while; do:
      section(:lines, i=:);
      i++;
    while i < #lines:}
    ^/char spr = `charlist[-1].sprite;
	^/char anim = `charlist[-1].anim;
    .com.loadFile(`charlist[-1].def, spr=)<,
    [^/char(^/char f){
      ^&.sff.Sprite s;
      s.new(1);
      if(#s~loadFromSff(f, `faceGroup, `faceIndex)=>error > 0) ret error;
      `charlist[-1].facePortrait = s;
      ret "";
    }];
    .com.loadFile(`charlist[-1].def, `charlist[-1].sprite=)<,
    [^/char(^/char f){
      ^&.sff.Sprite s;
      s.new(1);
      if(#s~loadFromSff(f, `bigGroup, `bigIndex)=>error > 0) ret error;
      `charlist[-1].bigPortrait = s;
      ret "";
    }];
	.com.loadFile(`charlist[-1].def, `charlist[-1].sprite=)<,
    [^/char(^/char f){
      ^&.sff.Sprite s;
      s.new(1);
      if(#s~loadFromSff(f, `orderGroup, `orderIndex)=>error > 0) ret error;
      `charlist[-1].orderPortrait = s;
      ret "";
    }];
	.com.loadFile(`charlist[-1].def, `charlist[-1].sprite=)<,
    [^/char(^/char f){
      ^&.sff.Sprite s;
      s.new(1);
      if(#s~loadFromSff(f, `vsGroup, `vsIndex)=>error > 0) ret error;
      `charlist[-1].vsPortrait = s;
      ret "";
    }];
    .com.loadFile(`charlist[-1].def, `charlist[-1].sprite=)<,
    [^/char(^/char f){
      ^&.sff.Sprite s;
      s.new(1);
      if(#s~loadFromSff(f, `winGroup, `winIndex)=>error > 0) ret error;
      `charlist[-1].winPortrait = s;
      ret "";
    }];
	.com.loadFile(`charlist[-1].def, `charlist[-1].sprite=)<,
    [^/char(^/char f){
      ^&.sff.Sprite s;
      s.new(1);
      if(#s~loadFromSff(f, `loserGroup, `loserIndex)=>error > 0) ret error;
      `charlist[-1].loserPortrait = s;
      ret "";
    }];
	.com.loadFile(`charlist[-1].def, `charlist[-1].sprite=)<,
    [^/char(^/char f){
      ^&.sff.Sprite s;
      s.new(1);
      if(#s~loadFromSff(f, `resultGroup, `resultIndex)=>error > 0) ret error;
      `charlist[-1].resultPortrait = s;
      ret "";
    }];
	.com.loadFile(`charlist[-1].def, `charlist[-1].sprite=)<,
    [^/char(^/char f){
      ^&.sff.Sprite s;
      s.new(1);
      if(#s~loadFromSff(f, `extraGroup, `extraIndex)=>error > 0) ret error;
      `charlist[-1].extraPortrait = s;
      ret "";
    }];
    ret true;
  }
  public ^/char addStage(^/char def)
  {:<-
    public void info(&.com.Section sc=)
    {
      ^/char data;
      branch{
      cond #(data = sc.get("displayname")) > 0:
        `stagelist[-1].name = data;
      cond #(data = sc.get("name")) > 0:
        `stagelist[-1].name = data;
      else:
        `stagelist[-1].name = `stagelist[-1].def;
      }
    }
	public void bgdef(&.com.Section sc=, bool unicode)
    {
      ^/char data;
      if(#(data = sc.get("spr")) > 0){
        `stagelist[-1].sprite = .com.readFileName(data, unicode);
      }
	  if(#(data = sc.get("anim")) > 0){
        `stagelist[-1].anim = .com.readFileName(data, unicode);
      }
    }
    bool unicode = false;
    bool infoflg = true, bgdefflg = true;
    //void section(%^/char lines, index i=)
    ~$void(^^/char, index=) section = [void(^^/char lines, index i=)
    {
      ^/char sec = lines[i];
      ^/char secname = .com.sectionName(sec=);
      if(#secname == 0) ret;
      i++;
      &.com.Section sc.parse(lines, i=);
      branch{
      cond .s.equ(secname, "info"):
        `addStage:<-info(sc=);
	  cond .s.equ(secname, "bgdef"):
        if(bgdefflg) bgdef(sc=, unicode);
        bgdefflg = false;
      }
    }];
    ^/char error;
    ^char mainbuf;
    ^/char d = .s.trim(def);
    if(
      #.com.loadFile("stages/", d=)=>error <, [^/char(^/char f){
        ret
          #.file.loadAsciiText(f)=>mainbuf > 0
          ? "" : .com.FileReadError;
      }] > 0)
    {
      ret error;
    }
    `stagelist.new[-1];
    `stagelist[-1].def = d;
    %^/char lines = .com.splitLines(mainbuf);
    .s.each!^/char?([void(^/char l=){l=.s.trim(l);}], lines);
    loop{index i = 0; while; do:
      section(:lines, i=:); //section(lines, i=);
      i++;
    while i < #lines:}
	^/char spr = `stagelist[-1].sprite; 
    .com.loadFile(`stagelist[-1].def, `stagelist[-1].sprite=)<,
    [^/char(^/char f){
      ^&.sff.Sprite s;
      s.new(1);
      if(#s~loadFromSff(f, `IconStageGroup, `IconStageIndex)=>error > 0) ret error;
      `stagelist[-1].iconStagePortrait = s;
      ret "";
    }];
	.com.loadFile(`stagelist[-1].def, `stagelist[-1].sprite=)<,
    [^/char(^/char f){
      ^&.sff.Sprite s;
      s.new(1);
      if(#s~loadFromSff(f, `bigStageGroup, `bigStageIndex)=>error > 0) ret error;
      `stagelist[-1].bigStagePortrait = s;
      ret "";
    }];
	.com.loadFile(`stagelist[-1].def, `stagelist[-1].sprite=)<,
    [^/char(^/char f){
      ^&.sff.Sprite s;
      s.new(1);
      if(#s~loadFromSff(f, `vsStageGroup, `vsStageIndex)=>error > 0) ret error;
      `stagelist[-1].vsStagePortrait = s;
      ret "";
    }];
	.com.loadFile(`stagelist[-1].def, `stagelist[-1].sprite=)<,
    [^/char(^/char f){
      ^&.sff.Sprite s;
      s.new(1);
      if(#s~loadFromSff(f, `winStageGroup, `winStageIndex)=>error > 0) ret error;
      `stagelist[-1].winStagePortrait = s;
      ret "";
    }];
	.com.loadFile(`stagelist[-1].def, `stagelist[-1].sprite=)<,
    [^/char(^/char f){
      ^&.sff.Sprite s;
      s.new(1);
      if(#s~loadFromSff(f, `extraStageGroup, `extraStageIndex)=>error > 0) ret error;
      `stagelist[-1].extraStagePortrait = s;
      ret "";
    }];
   ret def; //ret "";
  }
}


&SelectInfo
{
  &Player
  {
    &Selected
    {
      public index i;
      public int pal;
    }
    public %&Selected selchr;
    public void reset()
    {
      `selchr.new(0);
    }
  }
  public ^&Player p;
  public &.Select sel;
  new()
  {
    `p.new(2);
  }
  public bool addSelchr(int pn, int cn, int pl)
  {
    int n = `sel.getCharNo(cn);
    if(#`sel.charlist[n].def == 0) ret false;
    int p = pl;
    loop{
      int m = 0;
      while;
    do:
      n = .m.rand(0, #`sel.charlist-1);
      p = .m.rand(1, 12);
      if(++m > 100000) ret false;
    while
      #`sel.charlist[n].def == 0
      || .s.equ(`sel.charlist[n].def, "randomselect")
      :
    }
    lock(`p){
      `p[pn].selchr.new[-1];
      `p[pn].selchr[-1].i = n;
      `p[pn].selchr[-1].pal = p;
    }
    ret true;
  }
  public void reset()
  {
    `p[0].reset();
    `p[1].reset();
    `sel.selectedStageNo = -1;
  }
}

public &System
{
  public ^&.fgt.Fight fig;
  public &.SelectInfo selinf;
  public void selReset()
  {
    `selinf.reset();
  }
}