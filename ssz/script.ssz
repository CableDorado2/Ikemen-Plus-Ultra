lib sh = <shell.ssz>;
lib s = <string.ssz>;
lib consts = <consts.ssz>;
lib se = <alpha/sdlevent.ssz>;
lib sdl = <alpha/sdlplugin.ssz>;
lib mes = <alpha/mesdialog.ssz>;
lib m = <math.ssz>;
lib sff = "sff.ssz";
lib cmd = "command.ssz";
lib fnt = "font.ssz";
lib snd = "sound.ssz";
lib lua = <alpha/lua.ssz>;
lib com = "common.ssz";
lib vid = "video.ssz";
lib file = <file.ssz>;
lib chr = "char.ssz";

public double numArg(&.lua.State L=, int re=, int argc=, int nresults)
{
  double num = 0.0;
  argc++;
  if(!L.isNumber(argc)){
    L.pushString(''argc + "The argument is not a number.");
    re = -1;
    ret num;
  }
  num = L.toNumber(argc);
  re = nresults;
  ret num;
}

public bool blArg(&.lua.State L=, int re=, int argc=, int nresults)
{
  bool b = false;
  argc++;
  if(!L.isBoolean(argc)){
    L.pushString(''argc + "The argument is not a boolean.");
    re = -1;
    ret b;
  }
  b = L.toBoolean(argc);
  re = nresults;
  ret b;
}

public ^char strArg(&.lua.State L=, int re=, int argc=, int nresults)
{
  ^char str;
  argc++;
  if(!L.isString(argc)){
    L.pushString(''argc + "The argument is not a string.");
    re = -1;
    ret str;
  }
  str = L.toString(argc);
  re = nresults;
  ret str;
}

public ..refArg<_t>(&.lua.State L=, int re=, int argc=, int nresults) ^_t
{
  ^_t obj;
  argc++;
  ref r = L.toRef(argc);
  r.cast(obj=);
  if(#obj == 0){
    L.pushString(''argc + "The argument is invalid.");
    re = -1;
    ret obj;
  }
  re = nresults;
  ret obj;
}

public &Sff
{
  ^&.sff.Sff sff;
  public ^&.sff.Sff getSff()
  {
    ret `sff;
  }
  public bool load(^/char file)
  {
    `sff.new(1);
    ret #`sff~loadFile(file, false) == 0;
  }
  public bool loadAnim(^/char file)
  {
    `sff.new(1);
    ret #`sff~loadFileAnim(file, false) == 0;
  }
}

void sffNew(&.lua.State L=, int re=)
{
  int argc = 0, nret = 1;
  ^/char file = .strArg(L=, re=, argc=, nret); if(re < 0) ret;
  ^&.Sff sff.new(1);
  if(!sff~load(file)){
    L.pushString(file + "Failed to load SFF.");
    re = -1;
    ret;
  }
  L.pushRef(sff);
}

void sffAnim(&.lua.State L=, int re=)
{
  int argc = 0, nret = 1;
  ^/char file = .strArg(L=, re=, argc=, nret); if(re < 0) ret;
  ^&.Sff sff.new(1);
  if(!sff~loadAnim(file)){
    L.pushString(file + "Failed to load SFF.");
    re = -1;
    ret;
  }
  L.pushRef(sff);
}

public &Snd
{
  ^&.snd.Snd snd;
  public ^&.snd.Snd getSnd()
  {
    ret `snd;
  }
  public bool load(^/char file)
  {
    `snd.new(1);
    ret #`snd~loadFile(file) == 0;
  }
  public bool play(int g, int n)
  {
    if(#`snd == 0) ret false;
    ^&.snd.Sound c = .snd.getChannel(-1);
    if(#c == 0) ret false;
    c~sound = `snd~getSound(g, n);
    ret #c~sound > 0;
  }
}

void sndNew(&.lua.State L=, int re=)
{
  int argc = 0, nret = 1;
  ^/char file = .strArg(L=, re=, argc=, nret); if(re < 0) ret;
  ^&.Snd snd.new(1);
  if(!snd~load(file)){
    L.pushString(file + "Failed to load SND.");
    re = -1;
    ret;
  }
  L.pushRef(snd);
}

void sndPlay(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  ^&.Snd snd = .refArg!&.Snd?(L=, re=, argc=, nret); if(re < 0) ret;
  int g = (int).numArg(L=, re=, argc=, nret); if(re < 0) ret;
  int n = (int).numArg(L=, re=, argc=, nret); if(re < 0) ret;
  snd~play(g, n);
}

void sndStop(&.lua.State L=, int re=)
{
  re = 0;
  .snd.stopSound();
}

public &Font
{
  ^&.fnt.Font fnt;
  public ^&.fnt.Font getFont()
  {
    ret `fnt;
  }
  public bool load(^/char file)
  {
    `fnt.new(1);
    ret #`fnt~loadFile(file) == 0;
  }
}
void fontNew(&.lua.State L=, int re=)
{
  int argc = 0, nret = 1;
  ^/char file = .strArg(L=, re=, argc=, nret); if(re < 0) ret;
  ^&.Font font.new(1);
  if(!font~load(file)){
    L.pushString(file + "Failed to load FNT.");
    re = -1;
    ret;
  }
  L.pushRef(font);
}


public &Command
{
  ^&.cmd.CommandList cmd;
  new()
  {
    `cmd.new(1);
    `cmd~buffer.new(1);
  }
  public void input(int pn)
  {
    if(`cmd~input(pn-1, 1)) `cmd~step(1, false, false, 0);
  }
  public bool getState(^/char name)
  {
    ^&.cmd.Command cl = `cmd~get(name);
    loop{index i = 0; while; do:
      if(cl[i].curbuftime > 0) ret true;
      i++;
    while i < #cl:}
    ret false;
  }
  public void addCommand(^/char name, ^/char com, int time)
  {
    &.cmd.Command c;
    c.name = name;
    .cmd.resetReadKeymap();
    c.readCmd(com);
    c.time = time;
    `cmd~add(c=);
  }
  public void bufReset()
  {
    `cmd~bufReset();
  }
}

void commandNew(&.lua.State L=, int re=)
{
  re = 1;
  ^&.Command command.new(1);
  L.pushRef(command);
}

void commandAdd(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  ^&.Command command = .refArg!&.Command?(L=, re=, argc=, nret);
  if(re < 0) ret;
  ^/char name = .strArg(L=, re=, argc=, nret); if(re < 0) ret;
  ^/char com = .strArg(L=, re=, argc=, nret); if(re < 0) ret;
  int time = 1;
  if(L.getTop() > argc){
    time = (int).numArg(L=, re=, argc=, nret); if(re < 0) ret;
  }
  command~addCommand(name, com, time);
}

void commandGetState(&.lua.State L=, int re=)
{
  int argc = 0, nret = 1;
  ^&.Command command = .refArg!&.Command?(L=, re=, argc=, nret);
  if(re < 0) ret;
  ^/char name = .strArg(L=, re=, argc=, nret); if(re < 0) ret;
  L.pushBoolean(command~getState(name));
}

void commandInput(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  ^&.Command command = .refArg!&.Command?(L=, re=, argc=, nret);
  if(re < 0) ret;
  int pn = (int).numArg(L=, re=, argc=, nret); if(re < 0) ret;
  command~input(pn);
}

void commandBufReset(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  ^&.Command command = .refArg!&.Command?(L=, re=, argc=, nret);
  if(re < 0) ret;
  command~bufReset();
}

void startButton(&.lua.State L=, int re=)
{
  int argc = 0, nret = 1;
  int pn = (int).numArg(L=, re=, argc=, nret); if(re < 0) ret;
  L.pushBoolean(.cmd.startButton(pn));
}

void getSysCtrl(&.lua.State L=, int re=)
{
  int argc = 0, nret = 1;
  L.pushNumber((double).com.sysControls);
}

void setSysCtrl(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  int v = (int).numArg(L=, re=, argc=, nret); if(re < 0) ret;
  if(.com.sysControls == v) ret;
  .com.sysControls = v;
}

void inputThread(^/char title, ^^char str, ^bool done)
{
  .mes.InputStr(:title, str<>=:);
  done<> = true;
}

public &InputDialog
{
  thread!.inputThread? inth;
  ^^char str;
  ^bool done;
  new()
  {
    `str.new(1);
    `done.new(1);
    `done<> = true;
  }
  public bool popup(^/char title)
  {
    if(!`done<>) ret false;
    .sdl.fullScreen(.se.full = false);
    `done<> = false;
    `inth..(title, `str, `done);
    ret true;
  }
  public bool isDone()
  {
    ret `done<>;
  }
  public ^char getStr()
  {
    if(!`done<>) ret .consts.null!char?();
    ret `str<>;
  }
}

void inputDialogNew(&.lua.State L=, int re=)
{
  re = 1;
  ^&.InputDialog inputDialog.new(1);
  L.pushRef(inputDialog);
}

void inputDialogPopup(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  ^&.InputDialog inputDialog = .refArg!&.InputDialog?(L=, re=, argc=, nret);
  if(re < 0) ret;
  ^/char title = .strArg(L=, re=, argc=, nret); if(re < 0) ret;
  inputDialog~popup(title);
}

void inputDialogIsDone(&.lua.State L=, int re=)
{
  int argc = 0, nret = 1;
  ^&.InputDialog inputDialog = .refArg!&.InputDialog?(L=, re=, argc=, nret);
  if(re < 0) ret;
  L.pushBoolean(inputDialog~isDone());
}

void inputDialogGetStr(&.lua.State L=, int re=)
{
  int argc = 0, nret = 1;
  ^&.InputDialog inputDialog = .refArg!&.InputDialog?(L=, re=, argc=, nret);
  if(re < 0) ret;
  L.pushString(inputDialog~getStr());
}

public %char line;

void inputText(&.lua.State L=, int re=)
{
  int argc = 0, nret = 1;
  ^/char mod = .strArg(L=, re=, argc=, nret); if(re < 0) ret;
  bool dot = .blArg(L=, re=, argc=, nret); if(re < 0) ret;
  char lastChar = .sdl.getLastChar();
  switch(lastChar){
    case '\0':
    case '\x8':
      {
        ^char tmp = .line[0..#.line-1];
        .line.new(0);
        .line .= tmp;
      }
    default:
      branch{
      cond .s.equ(mod,"text"):
        if((lastChar >= '\x20' && lastChar < '\x30') || (lastChar >= '\x3a' && lastChar < '\x7f')) .line .= lastChar;
      cond .s.equ(mod,"num"):
        if((lastChar >= '\x30' && lastChar < '\x3a') || (lastChar == '\x2e' && dot)) .line .= lastChar;
      else:
        if(lastChar >= '\x20' && lastChar < '\x7f') .line .= lastChar;
      }
  }
  L.pushString(.line);
}

void setInputText(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  ^/char str = .strArg(L=, re=, argc=, nret); if(re < 0) ret;
  .line.new(0);
  .line .= str;
}

void clearInputText(&.lua.State L=, int re=)
{
  re = 0;
  .line.new(0);
}

void clipboardPaste(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.paste);
}

void getClipboardText(&.lua.State L=, int re=)
{
  re = 1;
  ^char str;
  .mes.GetClipboardStr(:str=:);
  L.pushString(str);
}

void playVideo(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  ^/char videofile = .strArg(L=, re=, argc=, nret); if(re < 0) ret;
  .vid.video~play(videofile);
}

void playBGM(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  ^/char file = .strArg(L=, re=, argc=, nret); if(re < 0) ret;
  .snd.bgm~play(file);
}

void fadeInBGM(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  int time = (int).numArg(L=, re=, argc=, nret); if(re < 0) ret;
  .sdl.fadeInBGM(time);
}

void fadeOutBGM(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  int time = (int).numArg(L=, re=, argc=, nret); if(re < 0) ret;
  .sdl.fadeOutBGM(time);
}

void sszOpen(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  ^/char filename = .strArg(L=, re=, argc=, nret); if(re < 0) ret; //Name of the file with his extension
  ^/char dirname = .strArg(L=, re=, argc=, nret); if(re < 0) ret; //Where is the file locate IN MAIN IKEMEN FOLDER, it does not accept slash
  .sh.open(dirname, "", filename, false, true); //Use in lua like that: sszOpen("chars", "Credits.txt") Also, set here to false false in order to open behind
}

void batOpen(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  ^/char filename = .strArg(L=, re=, argc=, nret); if(re < 0) ret;
  ^/char dirname = .strArg(L=, re=, argc=, nret); if(re < 0) ret;
  .sh.open(dirname, "", filename, false, false);
}

void webOpen(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  ^/char filename = .strArg(L=, re=, argc=, nret); if(re < 0) ret;
  .sh.open(filename, "", "", false, false);
}

void esc(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.esc);
}

void upKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.upKey);
}

void downKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.downKey);
}

void leftKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.leftKey);
}

void rightKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.rightKey);
}

void aKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.aKey);
}

void bKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.bKey);
}

void cKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.cKey);
}

void dKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.dKey);
}

void eKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.eKey);
}

void fKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.fKey);
}

void gKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.gKey);
}

void hKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.hKey);
}

void iKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.iKey);
}

void jKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.jKey);
}

void kKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.kKey);
}

void lKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.lKey);
}

void mKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.mKey);
}

void nKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.nKey);
}

void oKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.oKey);
}

void pKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.pKey);
}

void qKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.qKey);
}

void rKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.rKey);
}

void sKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.sKey);
}

void tKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.tKey);
}

void uKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.uKey);
}

void vKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.vKey);
}

void wKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.wKey);
}

void xKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.xKey);
}

void yKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.yKey);
}

void zKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.zKey);
}

void kzeroKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.kzeroKey);
}

void koneKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.koneKey);
}

void ktwoKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.ktwoKey);
}

void kthreeKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.kthreeKey);
}

void kfourKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.kfourKey);
}

void kfiveKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.kfiveKey);
}

void ksixKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.ksixKey);
}

void ksevenKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.ksevenKey);
}

void keightKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.keightKey);
}

void knineKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.knineKey);
}

void zeroKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.zeroKey);
}

void oneKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.oneKey);
}

void twoKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.twoKey);
}

void threeKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.threeKey);
}

void fourKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.fourKey);
}

void fiveKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.fiveKey);
}

void sixKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.sixKey);
}

void sevenKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.sevenKey);
}

void eightKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.eightKey);
}

void nineKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.nineKey);
}

void returnKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.returnKey);
}

void backspaceKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.backspaceKey);
}

void spaceKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.spaceKey);
}

void lshiftKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.lshiftKey);
}

void rshiftKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.rshiftKey);
}

void tabKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.tabKey);
}

void minusKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.minusKey);
}

void equalsKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.equalsKey);
}

void leftbracketKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.leftbracketKey);
}

void rightbracketKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.rightbracketKey);
}

void backslashKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.backslashKey);
}

void semicolonKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.semicolonKey);
}

void commaKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.commaKey);
}

void periodKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.periodKey);
}

void slashKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.slashKey);
}

void f1Key(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.f1Key);
}

void f2Key(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.f2Key);
}

void f3Key(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.f3Key);
}

void f4Key(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.f4Key);
}

void f5Key(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.f5Key);
}

void f9Key(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.f9Key);
}

void f10Key(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.f10Key);
}

void f11Key(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.f11Key);
}

void f12Key(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.f12Key);
}

void printscreenKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.printscreenKey);
}

void insertKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.insertKey);
}

void homeKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.homeKey);
}

void pageupKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.pageupKey);
}

void deleteKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.deleteKey);
}

void endKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.endKey);
}

void pagedownKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.pagedownKey);
}

void kdivideKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.kdivideKey);
}

void kmultiplyKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.kmultiplyKey);
}

void kminusKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.kminusKey);
}

void kplusKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.kplusKey);
}

void kenterKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.kenterKey);
}

void kperiodKey(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.kperiodKey);
}

//void nonushashKey(&.lua.State L=, int re=)
//{
  //re = 1;
  //L.pushBoolean(.se.nonushashKey);
//}

//void apostropheKey(&.lua.State L=, int re=)
//{
  //re = 1;
  //L.pushBoolean(.se.apostropheKey);
//}

//void graveKey(&.lua.State L=, int re=)
//{
  //re = 1;
  //L.pushBoolean(.se.graveKey);
//}

void getGamepadKeyA(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.getGamepadKeyA);
}

void getGamepadKeyB(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.getGamepadKeyB);
}

void getGamepadKeyC(&.lua.State L=, int re=)
{
  re = 1;
  L.pushBoolean(.se.getGamepadKeyC);
}

void sszRandom(&.lua.State L=, int re=)
{
  re = 1;
  L.pushNumber((double).m.random());
}

void setAutoguard(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  int pn = (int).numArg(L=, re=, argc=, nret); if(re < 0) ret;
  if(!.m.inRange!int?(1, #.com.autoguard, pn)){
    L.pushString("Invalid player number.");
    re = -1;
    ret;
  }
  bool ag = .blArg(L=, re=, argc=, nret); if(re < 0) ret;
  .com.autoguard[pn-1] = ag;
}

void setPowerShare(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  int pn = (int).numArg(L=, re=, argc=, nret); if(re < 0) ret;
  if(!.m.inRange!int?(1, #.com.powerShare, pn)){
    L.pushString("Invalid team number.");
    re = -1;
    ret;
  }
  bool ps = .blArg(L=, re=, argc=, nret); if(re < 0) ret;
  .com.powerShare[pn-1] = ps;
}

void setRoundTime(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  int rt = (int).numArg(L=, re=, argc=, nret); if(re < 0) ret;
  .com.roundTime = rt;
}

void getRoundTime(&.lua.State L=, int re=)
{
  re = 1;
  L.pushNumber((double).com.roundTime);
}

void setRoundsToWin(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  int rtw = (int).numArg(L=, re=, argc=, nret); if(re < 0) ret;
  .com.roundsToWin = rtw;
}

void getRoundsToWin(&.lua.State L=, int re=)
{
  re = 1;
  L.pushNumber((double).com.roundsToWin);
}

void setHomeTeam(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  int tn = (int).numArg(L=, re=, argc=, nret); if(re < 0) ret;
  if(!.m.inRange!int?(1, 2, tn)){
    L.pushString("Invalid team number.");
    re = -1;
    ret;
  }
  .com.home = tn - 1;
}

void setMatchNo(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  int mn = (int).numArg(L=, re=, argc=, nret); if(re < 0) ret;
  .com.match = mn;
}

void setFTNo(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  int fn = (int).numArg(L=, re=, argc=, nret); if(re < 0) ret;
  .com.matchsToWin = fn;
}

void setP1matchWins(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  int p1mw = (int).numArg(L=, re=, argc=, nret); if(re < 0) ret;
  .com.p1matchWins = p1mw;
}

void setP2matchWins(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  int p2mw = (int).numArg(L=, re=, argc=, nret); if(re < 0) ret;
  .com.p2matchWins = p2mw;
}

void setTourneyState(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  ^/char ts = .strArg(L=, re=, argc=, nret); if(re < 0) ret;
  .com.tourneyState = ts;
}

void setAbyssDepth(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  int ad = (int).numArg(L=, re=, argc=, nret); if(re < 0) ret;
  .com.abyssDepth = ad;
}

void getAbyssDepth(&.lua.State L=, int re=)
{
  re = 1;
  L.pushNumber((double).com.abyssDepth);
}

void setAbyssDepthBoss(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  int adb = (int).numArg(L=, re=, argc=, nret); if(re < 0) ret;
  .com.abyssDepthBoss = adb;
}

void getAbyssDepthBoss(&.lua.State L=, int re=)
{
  re = 1;
  L.pushNumber((double).com.abyssDepthBoss);
}

void setAbyssReward(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  int ar = (int).numArg(L=, re=, argc=, nret); if(re < 0) ret;
  .com.abyssReward = ar;
}

void getAbyssReward(&.lua.State L=, int re=)
{
  re = 1;
  L.pushNumber((double).com.abyssReward);
}

void exitMatch(&.lua.State L=, int re=)
{
  re = 0;
  .com.exitMatch = true;
}

void setSharedString(&.lua.State L=, int re=)
{
  int argc = 0, nret = 0;
  ^/char str = .strArg(L=, re=, argc=, nret); if(re < 0) ret;
  branch{
  cond .s.equ(str, "end"):
    .se.end = true;
  cond .s.equ(str, "reload"):
    .chr.chars.new(#.chr.chars);
  }
}

//void debugKey(&.lua.State L=, int re=)
//{
//  .se.debugkey = true;
//}

public void init(&.lua.State L=)
{
  L.register("sffNew", .sffNew);
  L.register("sffAnim", .sffAnim);
  L.register("sndNew", .sndNew);
  L.register("sndPlay", .sndPlay);
  L.register("sndStop", .sndStop);
  L.register("fontNew", .fontNew);
  L.register("commandNew", .commandNew);
  L.register("commandAdd", .commandAdd);
  L.register("commandGetState", .commandGetState);
  L.register("commandInput", .commandInput);
  L.register("commandBufReset", .commandBufReset);
  L.register("startButton", .startButton);
  L.register("getSysCtrl", .getSysCtrl);
  L.register("setSysCtrl", .setSysCtrl);
  L.register("inputDialogNew", .inputDialogNew);
  L.register("inputDialogPopup", .inputDialogPopup);
  L.register("inputDialogIsDone", .inputDialogIsDone);
  L.register("inputDialogGetStr", .inputDialogGetStr);
  L.register("inputText", .inputText);
  L.register("setInputText", .setInputText);
  L.register("clearInputText", .clearInputText);
  L.register("clipboardPaste", .clipboardPaste);
  L.register("getClipboardText", .getClipboardText);
  L.register("playBGM", .playBGM);
  L.register("fadeInBGM", .fadeInBGM);
  L.register("fadeOutBGM", .fadeOutBGM);
  L.register("playVideo", .playVideo);
  L.register("sszOpen", .sszOpen);
  L.register("batOpen", .batOpen);
  L.register("webOpen", .webOpen);
  L.register("esc", .esc);
  L.register("upKey", .upKey);
  L.register("downKey", .downKey);
  L.register("leftKey", .leftKey);
  L.register("rightKey", .rightKey);
  L.register("aKey", .aKey);
  L.register("bKey", .bKey);
  L.register("cKey", .cKey);
  L.register("dKey", .dKey);
  L.register("eKey", .eKey);
  L.register("fKey", .fKey);
  L.register("gKey", .gKey);
  L.register("hKey", .hKey);
  L.register("iKey", .iKey);
  L.register("jKey", .jKey);
  L.register("kKey", .kKey);
  L.register("lKey", .lKey);
  L.register("mKey", .mKey);
  L.register("nKey", .nKey);
  L.register("oKey", .oKey);
  L.register("pKey", .pKey);
  L.register("qKey", .qKey);
  L.register("rKey", .rKey);
  L.register("sKey", .sKey);
  L.register("tKey", .tKey);
  L.register("uKey", .uKey);
  L.register("vKey", .vKey);
  L.register("wKey", .wKey);
  L.register("xKey", .xKey);
  L.register("yKey", .yKey);
  L.register("zKey", .zKey);
  L.register("kzeroKey", .kzeroKey);
  L.register("koneKey", .koneKey);
  L.register("ktwoKey", .ktwoKey);
  L.register("kthreeKey", .kthreeKey);
  L.register("kfourKey", .kfourKey);
  L.register("kfiveKey", .kfiveKey);
  L.register("ksixKey", .ksixKey);
  L.register("ksevenKey", .ksevenKey);
  L.register("keightKey", .keightKey);
  L.register("knineKey", .knineKey);
  L.register("zeroKey", .zeroKey);
  L.register("oneKey", .oneKey);
  L.register("twoKey", .twoKey);
  L.register("threeKey", .threeKey);
  L.register("fourKey", .fourKey);
  L.register("fiveKey", .fiveKey);
  L.register("sixKey", .sixKey);
  L.register("sevenKey", .sevenKey);
  L.register("eightKey", .eightKey);
  L.register("nineKey", .nineKey);
  L.register("returnKey", .returnKey);
  L.register("backspaceKey", .backspaceKey);
  L.register("spaceKey", .spaceKey);
  L.register("lshiftKey", .lshiftKey);
  L.register("rshiftKey", .rshiftKey);
  L.register("tabKey", .tabKey);
  L.register("minusKey", .minusKey);
  L.register("equalsKey", .equalsKey);
  L.register("leftbracketKey", .leftbracketKey);
  L.register("rightbracketKey", .rightbracketKey);
  L.register("backslashKey", .backslashKey);
  L.register("semicolonKey", .semicolonKey);
  L.register("commaKey", .commaKey);
  L.register("periodKey", .periodKey);
  L.register("slashKey", .slashKey);
  L.register("f1Key", .f1Key);
  L.register("f2Key", .f2Key);
  L.register("f3Key", .f3Key);
  L.register("f4Key", .f4Key);
  L.register("f5Key", .f5Key);
  L.register("f9Key", .f9Key);
  L.register("f10Key", .f10Key);
  L.register("f11Key", .f11Key);
  L.register("f12Key", .f12Key);
  L.register("printscreenKey", .printscreenKey);
  L.register("insertKey", .insertKey);
  L.register("homeKey", .homeKey);
  L.register("pageupKey", .pageupKey);
  L.register("deleteKey", .deleteKey);
  L.register("endKey", .endKey);
  L.register("pagedownKey", .pagedownKey);
  L.register("kdivideKey", .kdivideKey);
  L.register("kmultiplyKey", .kmultiplyKey);
  L.register("kminusKey", .kminusKey);
  L.register("kplusKey", .kplusKey);
  L.register("kenterKey", .kenterKey);
  L.register("kperiodKey", .kperiodKey);
  //L.register("nonushashKey", .nonushashKey);
  //L.register("apostropheKey", .apostropheKey);
  //L.register("graveKey", .graveKey);
  L.register("getGamepadKeyA", .getGamepadKeyA);
  L.register("getGamepadKeyB", .getGamepadKeyB);
  L.register("getGamepadKeyC", .getGamepadKeyC);
  L.register("sszRandom", .sszRandom);
  L.register("setAutoguard", .setAutoguard);
  L.register("setPowerShare", .setPowerShare);
  L.register("setRoundTime", .setRoundTime);
  L.register("getRoundTime", .getRoundTime);
  L.register("setRoundsToWin", .setRoundsToWin);
  L.register("getRoundsToWin", .getRoundsToWin);
  L.register("setHomeTeam", .setHomeTeam);
  L.register("setMatchNo", .setMatchNo);
  L.register("setFTNo", .setFTNo);
  L.register("setP1matchWins", .setP1matchWins);
  L.register("setP2matchWins", .setP2matchWins);
  L.register("setTourneyState", .setTourneyState);
  L.register("setAbyssReward", .setAbyssReward);
  L.register("setAbyssDepth", .setAbyssDepth);
  L.register("setAbyssDepthBoss", .setAbyssDepthBoss);
  L.register("getAbyssDepthBoss", .getAbyssDepthBoss);
  L.register("getAbyssReward", .getAbyssReward);
  L.register("getAbyssDepth", .getAbyssDepth);
  L.register("exitMatch", .exitMatch);
  L.register("setSharedString", .setSharedString);
  //L.register("debugKey", .debugKey);
}
