From: <Saved by Blink>
Snapshot-Content-Location: http://luajit.org/ext_ffi.html
Subject: FFI Library
Date: Tue, 21 Oct 2025 11:30:23 -0400
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--alY9aakrtJNmPUSm4vU56fLzB2lgg3Z1sNWhWzTAmv----"


------MultipartBoundary--alY9aakrtJNmPUSm4vU56fLzB2lgg3Z1sNWhWzTAmv----
Content-Type: text/html
Content-ID: <frame-C5E63C34960B337CA795C3FC14B6925D@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: http://luajit.org/ext_ffi.html

<!DOCTYPE html><html><head><meta http-equiv=3D"Content-Type" content=3D"tex=
t/html; charset=3DUTF-8">
<title>FFI Library</title>

<meta name=3D"Copyright" content=3D"Copyright (C) 2005-2025">
<meta name=3D"Language" content=3D"en">
<link rel=3D"stylesheet" type=3D"text/css" href=3D"http://luajit.org/bluequ=
ad.css" media=3D"screen">
<link rel=3D"stylesheet" type=3D"text/css" href=3D"http://luajit.org/bluequ=
ad-print.css" media=3D"print">
<meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D1,=
 maximum-scale=3D1.5">

</head>
<body>
<div id=3D"site">
<a href=3D"https://luajit.org/"><span>Lua<span id=3D"logo">JIT</span></span=
></a>
</div>
<div id=3D"head">
<h1>FFI Library</h1>
</div>
<div id=3D"nav">
<ul><li>
<a href=3D"http://luajit.org/index.html">Home</a>
</li><li>
<a href=3D"http://luajit.org/luajit.html">LuaJIT</a>
<ul><li>
<a href=3D"http://luajit.org/download.html">Download =E2=87=A9</a>
</li><li>
<a href=3D"http://luajit.org/install.html">Installation</a>
</li><li>
<a href=3D"http://luajit.org/running.html">Running</a>
</li></ul>
</li><li>
<a href=3D"http://luajit.org/extensions.html">Extensions</a>
<ul><li>
<a class=3D"current" href=3D"http://luajit.org/ext_ffi.html">FFI Library</a=
>
<ul><li>
<a href=3D"http://luajit.org/ext_ffi_tutorial.html">FFI Tutorial</a>
</li><li>
<a href=3D"http://luajit.org/ext_ffi_api.html">ffi.* API</a>
</li><li>
<a href=3D"http://luajit.org/ext_ffi_semantics.html">FFI Semantics</a>
</li></ul>
</li><li>
<a href=3D"http://luajit.org/ext_buffer.html">String Buffers</a>
</li><li>
<a href=3D"http://luajit.org/ext_jit.html">jit.* Library</a>
</li><li>
<a href=3D"http://luajit.org/ext_c_api.html">Lua/C API</a>
</li><li>
<a href=3D"http://luajit.org/ext_profiler.html">Profiler</a>
</li></ul>
</li><li>
<a href=3D"http://luajit.org/status.html">Status</a>
</li><li>
<a href=3D"http://luajit.org/faq.html">FAQ</a>
</li><li>
<a href=3D"http://luajit.org/list.html">Mailing List</a>
</li><li>
<a href=3D"http://luajit.org/sponsors.html">Sponsors</a>
</li></ul>
</div>
<div id=3D"main">
<p>

The FFI library allows <b>calling external C&nbsp;functions</b> and
<b>using C&nbsp;data structures</b> from pure Lua code.

</p>
<p>

The FFI library largely obviates the need to write tedious manual
Lua/C bindings in C. No need to learn a separate binding language
=E2=80=94 <b>it parses plain C&nbsp;declarations!</b> These can be
cut-n-pasted from C&nbsp;header files or reference manuals. It's up to
the task of binding large libraries without the need for dealing with
fragile binding generators.

</p>
<p>
The FFI library is tightly integrated into LuaJIT (it's not available
as a separate module). The code generated by the JIT-compiler for
accesses to C&nbsp;data structures from Lua code is on par with the
code a C&nbsp;compiler would generate. Calls to C&nbsp;functions can
be inlined in JIT-compiled code, unlike calls to functions bound via
the classic Lua/C API.
</p>
<p>
This page gives a short introduction to the usage of the FFI library.
<em>Please use the FFI sub-topics in the navigation bar to learn more.</em>
</p>

<h2 id=3D"call">Motivating Example: Calling External C Functions</h2>
<p>
It's really easy to call an external C&nbsp;library function:
</p>
<pre class=3D"code mark"><span class=3D"codemark">=E2=91=A0
=E2=91=A1


=E2=91=A2</span>local ffi =3D require("ffi")
ffi.cdef[[
<span style=3D"color:#00a000;">int printf(const char *fmt, ...);</span>
]]
ffi.C.printf("Hello %s!", "world")
</pre>
<p>
So, let's pick that apart:
</p>
<p>
<span class=3D"mark">=E2=91=A0</span> Load the FFI library.
</p>
<p>
<span class=3D"mark">=E2=91=A1</span> Add a C&nbsp;declaration
for the function. The part inside the double-brackets (in green) is
just standard C&nbsp;syntax.
</p>
<p>
<span class=3D"mark">=E2=91=A2</span> Call the named
C&nbsp;function =E2=80=94 Yes, it's that simple!
</p>
<p style=3D"font-size: 8pt;">
Actually, what goes on behind the scenes is far from simple: <span style=3D=
"color:#4040c0;">=E2=91=A2</span> makes use of the standard
C&nbsp;library namespace <tt>ffi.C</tt>. Indexing this namespace with
a symbol name (<tt>"printf"</tt>) automatically binds it to the
standard C&nbsp;library. The result is a special kind of object which,
when called, runs the <tt>printf</tt> function. The arguments passed
to this function are automatically converted from Lua objects to the
corresponding C&nbsp;types.
</p>
<p>
Ok, so maybe the use of <tt>printf()</tt> wasn't such a spectacular
example. You could have done that with <tt>io.write()</tt> and
<tt>string.format()</tt>, too. But you get the idea ...
</p>
<p>
So here's something to pop up a message box on Windows:
</p>
<pre class=3D"code">local ffi =3D require("ffi")
ffi.cdef[[
<span style=3D"color:#00a000;">int MessageBoxA(void *w, const char *txt, co=
nst char *cap, int type);</span>
]]
ffi.C.MessageBoxA(nil, "Hello world!", "Test", 0)
</pre>
<p>
Bing! Again, that was far too easy, no?
</p>
<p style=3D"font-size: 8pt;">
Compare this with the effort required to bind that function using the
classic Lua/C API: create an extra C&nbsp;file, add a C&nbsp;function
that retrieves and checks the argument types passed from Lua and calls
the actual C&nbsp;function, add a list of module functions and their
names, add a <tt>luaopen_*</tt> function and register all module
functions, compile and link it into a shared library (DLL), move it to
the proper path, add Lua code that loads the module aaaand ... finally
call the binding function. Phew!
</p>

<h2 id=3D"cdata">Motivating Example: Using C Data Structures</h2>
<p>
The FFI library allows you to create and access C&nbsp;data
structures. Of course, the main use for this is for interfacing with
C&nbsp;functions. But they can be used stand-alone, too.
</p>
<p>
Lua is built upon high-level data types. They are flexible, extensible
and dynamic. That's why we all love Lua so much. Alas, this can be
inefficient for certain tasks, where you'd really want a low-level
data type. E.g. a large array of a fixed structure needs to be
implemented with a big table holding lots of tiny tables. This imposes
both a substantial memory overhead as well as a performance overhead.
</p>
<p>
Here's a sketch of a library that operates on color images, plus a
simple benchmark. First, the plain Lua version:
</p>
<pre class=3D"code">local floor =3D math.floor

local function image_ramp_green(n)
  local img =3D {}
  local f =3D 255/(n-1)
  for i=3D1,n do
    img[i] =3D { red =3D 0, green =3D floor((i-1)*f), blue =3D 0, alpha =3D=
 255 }
  end
  return img
end

local function image_to_gray(img, n)
  for i=3D1,n do
    local y =3D floor(0.3*img[i].red + 0.59*img[i].green + 0.11*img[i].blue=
)
    img[i].red =3D y; img[i].green =3D y; img[i].blue =3D y
  end
end

local N =3D 400*400
local img =3D image_ramp_green(N)
for i=3D1,1000 do
  image_to_gray(img, N)
end
</pre>
<p>
This creates a table with 160.000 pixels, each of which is a table
holding four number values in the range of 0-255. First, an image with
a green ramp is created (1D for simplicity), then the image is
converted to grayscale 1000 times. Yes, that's silly, but I was in
need of a simple example ...
</p>
<p>
And here's the FFI version. The modified parts have been marked in
bold:
</p>
<pre class=3D"code mark"><span class=3D"codemark">=E2=91=A0





=E2=91=A1

=E2=91=A2
=E2=91=A3






=E2=91=A2
=E2=91=A4</span><b>local ffi =3D require("ffi")
ffi.cdef[[
</b><span style=3D"color:#00a000;">typedef struct { uint8_t red, green, blu=
e, alpha; } rgba_pixel;</span><b>
]]</b>

local function image_ramp_green(n)
  <b>local img =3D ffi.new("rgba_pixel[?]", n)</b>
  local f =3D 255/(n-1)
  for i=3D<b>0,n-1</b> do
    <b>img[i].green =3D i*f</b>
    <b>img[i].alpha =3D 255</b>
  end
  return img
end

local function image_to_grey(img, n)
  for i=3D<b>0,n-1</b> do
    local y =3D <b>0.3*img[i].red + 0.59*img[i].green + 0.11*img[i].blue</b=
>
    img[i].red =3D y; img[i].green =3D y; img[i].blue =3D y
  end
end

local N =3D 400*400
local img =3D image_ramp_green(N)
for i=3D1,1000 do
  image_to_grey(img, N)
end
</pre>
<p>
Ok, so that wasn't too difficult:
</p>
<p>
<span class=3D"mark">=E2=91=A0</span> First, load the FFI
library and declare the low-level data type. Here we choose a
<tt>struct</tt> which holds four byte fields, one for each component
of a 4x8&nbsp;bit RGBA pixel.
</p>
<p>
<span class=3D"mark">=E2=91=A1</span> Creating the data
structure with <tt>ffi.new()</tt> is straightforward =E2=80=94 the
<tt>'?'</tt> is a placeholder for the number of elements of a
variable-length array.
</p>
<p>
<span class=3D"mark">=E2=91=A2</span> C&nbsp;arrays are
zero-based, so the indexes have to run from <tt>0</tt> to
<tt>n-1</tt>. One might want to allocate one more element instead to
simplify converting legacy code.
</p>
<p>
<span class=3D"mark">=E2=91=A3</span> Since <tt>ffi.new()</tt>
zero-fills the array by default, we only need to set the green and the
alpha fields.
</p>
<p>
<span class=3D"mark">=E2=91=A4</span> The calls to
<tt>math.floor()</tt> can be omitted here, because floating-point
numbers are already truncated towards zero when converting them to an
integer. This happens implicitly when the number is stored in the
fields of each pixel.
</p>
<p>
Now let's have a look at the impact of the changes: first, memory
consumption for the image is down from 22&nbsp;Megabytes to
640&nbsp;Kilobytes (400*400*4 bytes). That's a factor of 35x less! So,
yes, tables do have a noticeable overhead. BTW: The original program
would consume 40&nbsp;Megabytes in plain Lua (on x64).
</p>
<p>
Next, performance: the pure Lua version runs in 9.57 seconds (52.9
seconds with the Lua interpreter) and the FFI version runs in 0.48
seconds on my machine (YMMV). That's a factor of 20x faster (110x
faster than the Lua interpreter).
</p>
<p style=3D"font-size: 8pt;">
The avid reader may notice that converting the pure Lua version over
to use array indexes for the colors (<tt>[1]</tt> instead of
<tt>.red</tt>, <tt>[2]</tt> instead of <tt>.green</tt> etc.) ought to
be more compact and faster. This is certainly true (by a factor of
~1.7x). Switching to a struct-of-arrays would help, too.
</p>
<p style=3D"font-size: 8pt;">
However, the resulting code would be less idiomatic and rather
error-prone. And it still doesn't get even close to the performance of
the FFI version of the code. Also, high-level data structures cannot
be easily passed to other C&nbsp;functions, especially I/O functions,
without undue conversion penalties.
</p>
<br class=3D"flush">
</div>
<div id=3D"foot">
<hr class=3D"hide">
Copyright =C2=A9 2005-2025
<span class=3D"noprint">
=C2=B7
<a href=3D"http://luajit.org/contact.html">Contact =E2=80=93 IMPRESSUM</a>
</span>
</div>


</body></html>
------MultipartBoundary--alY9aakrtJNmPUSm4vU56fLzB2lgg3Z1sNWhWzTAmv----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://luajit.org/bluequad-print.css

@charset "utf-8";

body { font-family: serif; font-size: 11pt; margin: 0px 3em; padding: 0px; =
border: none; }

a:link, a:visited, a:hover, a:active { text-decoration: none; background: t=
ransparent; color: rgb(0, 0, 255); }

h1, h2, h3 { font-family: sans-serif; font-weight: bold; text-align: left; =
margin: 0.5em 0px; padding: 0px; }

h1 { font-size: 200%; }

h2 { font-size: 150%; }

h3 { font-size: 125%; }

p { margin: 0px 0px 0.5em; padding: 0px; }

ul, ol { margin: 0.5em 0px; padding: 0px 0px 0px 2em; }

ul { list-style: outside square; }

ol { list-style: outside decimal; }

li { margin: 0px; padding: 0px; }

dl { margin: 1em 0px; padding: 1em; border: 1px solid black; }

dt { font-weight: bold; margin: 0px; padding: 0px; }

dt sup { float: right; margin-left: 1em; }

dd { margin: 0.5em 0px 0px 2em; padding: 0px; }

table { table-layout: fixed; width: 100%; margin: 1em 0px; padding: 0px; bo=
rder: 1px solid black; border-spacing: 0px; border-collapse: collapse; }

tr { margin: 0px; padding: 0px; border: none; }

td { text-align: left; margin: 0px; padding: 0.2em 0.5em; border-top: 1px s=
olid black; border-bottom: 1px solid black; }

tr.separate td { border-top: double; }

tt, pre, code, kbd, samp { font-family: monospace; font-size: 75%; }

kbd { font-weight: bolder; }

blockquote, pre { margin: 1em 2em; padding: 0px; }

img { border: none; vertical-align: baseline; margin: 0px; padding: 0px; }

img.left { float: left; margin: 0.5em 1em 0.5em 0px; }

img.right { float: right; margin: 0.5em 0px 0.5em 1em; }

.flush { clear: both; visibility: hidden; }

.hide, .noprint, #nav { display: none !important; }

.pagebreak { break-before: page; }

#site { text-align: right; font-family: sans-serif; font-weight: bold; marg=
in: 0px 1em; border-bottom: 1pt solid black; }

#site a { font-size: 1.2em; }

#site a:link, #site a:visited { text-decoration: none; font-weight: bold; b=
ackground: transparent; color: rgb(255, 255, 255); }

#logo { color: rgb(255, 128, 0); }

#head { clear: both; margin: 0px 1em; }

#main { line-height: 1.3; text-align: justify; margin: 1em; }

#foot { clear: both; font-size: 80%; text-align: center; margin: 0px 1.25em=
; padding: 0.5em 0px 0px; border-top: 1pt solid black; break-before: avoid;=
 break-after: avoid; }
------MultipartBoundary--alY9aakrtJNmPUSm4vU56fLzB2lgg3Z1sNWhWzTAmv----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://luajit.org/bluequad.css

@charset "utf-8";

body { font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10pt;=
 margin: 0px; padding: 0px; border: none; background: rgb(224, 224, 224); c=
olor: rgb(0, 0, 0); }

a:link { text-decoration: none; background: transparent; color: rgb(33, 66,=
 191); }

a:visited { text-decoration: none; background: transparent; color: rgb(129,=
 34, 191); }

a:hover, a:active { text-decoration: underline; background: transparent; co=
lor: rgb(255, 0, 0); }

h1, h2, h3 { font-weight: bold; text-align: left; margin: 0.5em 0px; paddin=
g: 0px; background: transparent; }

h1 { font-size: 200%; line-height: 3em; margin: 0px; }

h2 { font-size: 150%; color: rgb(96, 96, 96); }

h3 { font-size: 125%; color: rgb(64, 64, 64); }

p { max-width: 600px; margin: 0px 0px 0.5em; padding: 0px; }

b { color: rgb(64, 64, 64); }

ul, ol { max-width: 600px; margin: 0.5em 0px; padding: 0px 0px 0px 2em; }

ul { list-style: outside square; }

ol { list-style: outside decimal; }

li { margin: 0px; padding: 0px; }

dl { max-width: 600px; margin: 1em 0px; padding: 1em; border: 1px solid rgb=
(191, 207, 255); background: rgb(240, 244, 255); }

dt { font-weight: bold; margin: 0px; padding: 0px; }

dt sup { float: right; margin-left: 1em; color: rgb(128, 128, 128); }

dt a:visited { text-decoration: none; color: rgb(33, 66, 191); }

dt a:hover, dt a:active { text-decoration: none; color: rgb(255, 0, 0); }

dd { margin: 0.5em 0px 0px 2em; padding: 0px; }

div.tablewrap { max-width: 600px; }

table { table-layout: fixed; border-spacing: 0px; border-collapse: collapse=
; max-width: 600px; width: 100%; margin: 1em 0px; padding: 0px; border: 1px=
 solid rgb(191, 207, 255); }

tr { margin: 0px; padding: 0px; border: none; }

tr.odd { background: rgb(240, 244, 255); }

tr.separate td { border-top: 1px solid rgb(191, 207, 255); }

td { text-align: left; margin: 0px; padding: 0.2em 0.5em; border: none; }

tt, code, kbd, samp { font-family: "Courier New", Courier, monospace; line-=
height: 1.2; font-size: 110%; }

kbd { font-weight: bolder; }

blockquote, pre { max-width: 600px; margin: 1em 2em; padding: 0px; }

pre { line-height: 1.1; }

pre.code { line-height: 1.4; margin: 0.5em 0px 1em 0.5em; padding: 0.5em 1e=
m; border: 1px solid rgb(191, 207, 255); background: rgb(240, 244, 255); }

pre.mark { padding-left: 2em; }

span.codemark { position: absolute; left: 16em; color: rgb(64, 64, 192); }

span.mark { color: rgb(64, 64, 192); font-family: "Courier New", Courier, m=
onospace; line-height: 1.1; }

img { border: none; vertical-align: baseline; margin: 0px; padding: 0px; }

img.left { float: left; margin: 0.5em 1em 0.5em 0px; }

img.right { float: right; margin: 0.5em 0px 0.5em 1em; }

.indent { padding-left: 1em; }

.flush { clear: both; visibility: hidden; }

.hide, .noscreen { display: none !important; }

.ext { color: rgb(255, 128, 0); }

.note { padding: 0.5em 1em; border-left: 3px solid rgb(191, 207, 255); }

#site { clear: both; float: left; width: 13em; text-align: center; font-wei=
ght: bold; margin: 0px; padding: 0px; background: transparent; color: rgb(2=
55, 255, 255); }

#site a { font-size: 200%; }

#site a:link, #site a:visited { text-decoration: none; font-weight: bold; b=
ackground: transparent; color: rgb(255, 255, 255); }

#site span { line-height: 3em; }

#logo { color: rgb(255, 179, 128); }

#head { margin: 0px; padding: 0px 0px 0px 2em; border-left: 13em solid rgb(=
65, 98, 191); border-right: 3em solid rgb(96, 120, 191); background: rgb(96=
, 120, 191); color: rgb(230, 236, 255); }

#nav { clear: both; float: left; overflow: hidden; text-align: left; line-h=
eight: 1.5; width: 13em; padding-top: 1em; background: transparent; }

#nav ul { list-style: outside none; margin: 0px; padding: 0px; }

#nav li { margin: 0px; padding: 0px; }

#nav a { display: block; text-decoration: none; font-weight: bold; margin: =
0px; padding: 2px 1em; border-top: 1px solid transparent; border-bottom: 1p=
x solid transparent; background: transparent; color: rgb(33, 66, 191); }

#nav a:hover, #nav a:active { text-decoration: none; border-top: 1px solid =
rgb(151, 167, 215); border-bottom: 1px solid rgb(230, 236, 255); background=
: rgb(185, 201, 249); color: rgb(255, 0, 0); }

#nav a.current, #nav a.current:hover, #nav a.current:active { border-top: 1=
px solid rgb(230, 236, 255); border-bottom: 1px solid rgb(151, 167, 215); b=
ackground: rgb(197, 213, 255); color: rgb(33, 66, 191); }

#nav ul ul a { padding: 0px 1em 0px 1.7em; }

#nav ul ul ul a { padding: 0px 0.5em 0px 2.4em; }

#main { line-height: 1.5; text-align: left; margin: 0px; padding: 1em 2em; =
border-left: 13em solid rgb(191, 207, 255); border-right: 3em solid rgb(230=
, 236, 255); background: rgb(230, 236, 255); }

#foot { clear: both; font-size: 80%; text-align: center; margin: 0px; paddi=
ng: 0.5em; background: rgb(96, 120, 191); color: rgb(255, 255, 255); }

#foot a:link, #foot a:visited { text-decoration: underline; background: tra=
nsparent; color: rgb(255, 255, 255); }

#foot a:hover, #foot a:active { text-decoration: underline; background: tra=
nsparent; color: rgb(191, 207, 255); }
------MultipartBoundary--alY9aakrtJNmPUSm4vU56fLzB2lgg3Z1sNWhWzTAmv------
